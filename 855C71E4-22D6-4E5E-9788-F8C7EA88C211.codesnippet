<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>myFrameModel</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>@interface &lt;#class name#&gt; : NSObject
typedef NS_ENUM(NSUInteger, &lt;#MyEnum#&gt;) {
    &lt;#MyEnumValueA#&gt;,
};

@property(nonatomic,copy)NSString * &lt;#key#&gt;;
@property(nonatomic,copy)NSArray * &lt;#name#&gt;s;//列表里有数组
@property(nonatomic,assign)&lt;#Type type#&gt;;//针对字典里有状态-nsnumber型
@property(nonatomic,assign,getter =is&lt;#name#&gt;Hiddened)BOOL &lt;#name#&gt;Hidden;//这样的值主要是由外界设置上的，不由字典里获取


- (instancetype)initWithDict:(NSDictionary *)dict;
+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict;

+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path;
+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path&lt;#andDicType:(dicType)type#&gt;;//判断字典类型判断
+ (NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array;


//frame所需的属性（这个可以做输出，也可以当限制）

@property(nonatomic,assign,readonly)CGFloat &lt;#xxx#&gt;Width;
@property(nonatomic,assign,readonly)CGFloat  &lt;#xxx#&gt;Height;

@property(nonatomic,assign,readonly)CGRect  &lt;#xxx#&gt;Frame;

-(void)setFrameWithRange:(CGPoint)widthHeight;
//连带初始化frame

- (instancetype)initWithDict:(NSDictionary *)dict AndRange:(CGPoint)widthHeight;
+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict AndRange:(CGPoint)widthHeight;

+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndRange:(CGPoint)widthHeight;
+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path&lt;#andDicType:(dicType)type#&gt; AndRange:(CGPoint)widthHeight;
+ (NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array AndRange:(CGPoint)widthHeight;

@end

@implementation &lt;#class#&gt;

#pragma mark - ============== 实现方法 ==============

#warning 由外界数据，根据数组上下关系来设置的{
//针对单个的设置这个需要自己先通过上下数组进行判断赋值hidden
- (instancetype)initWithDict:(NSDictionary *)dict and&lt;#name#&gt;Hidden:(BOOL)&lt;#name#&gt;Hidden
{
    self = [super init];
    if (self) {
        [self setValuesForKeysWithDictionary:dict];
        self.&lt;#name#&gt;Hidden =&lt;#name#&gt;Hidden;
    }
    return self;
}

//针对数组集体设置hidden
+(NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array
{
    NSMutableArray *arrayM = [NSMutableArray array];
    for (int i=0; i&lt;array.count; i++) {
        NSDictionary *dict = array[i];
        &lt;#name#&gt;Model * previous&lt;#name#&gt;Model = arrayM.lastObject;
        
        BOOL &lt;#name#&gt;Hidden = &lt;#判断公式#&gt;;
        
        &lt;#name#&gt;Model * &lt;#name#&gt;Model = [self cellWithDict:dict andHiddenTime:&lt;#name#&gt;Hidden];
        
        [arrayM addObject:&lt;#name#&gt;Model];
    }
    
    return arrayM;
}

#warning 由外界数据，根据数组上下关系来设置的}

- (instancetype)initWithDict:(NSDictionary *)dict
{
    self = [super init];
    if (self) {
        [self setValuesForKeysWithDictionary:dict];
        _&lt;#name#&gt;s = [&lt;#Class name#&gt; &lt;#name#&gt;sWithArray:_&lt;#name#&gt;s];//判断属性里有无数组
    }
    return self;
}

+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict
{
    return [[self alloc] initWithDict:dict];
}

+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path
{
    NSArray *array = [NSArray arrayWithContentsOfFile:path];
    
    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict]];
    }
    
    return arrayM;
}

/*//需要时打开
 + (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path andDicType:(dicType)type
 {
 NSArray *array = [NSArray arrayWithContentsOfFile:path];
 NSMutableArray *arrayM = [NSMutableArray array];
 if (type) {
 for (NSDictionary *dict in array) {
 
 [arrayM addObject:[self &lt;#name#&gt;WithDict:dict]];
 }
 return arrayM;
 
 }else{
 
 &lt;#Name#&gt;Model * &lt;#name#&gt;Model = [[self alloc]init];
 &lt;#name#&gt;Model.&lt;#array#&gt;s = [&lt;#Name1#&gt;Model &lt;#name#&gt;sWithArray:array];
 return @[&lt;#name#&gt;Model];
 }
 
 }*/


+(NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array
{
    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict]];
    }
    
    return arrayM;
}

//连带初始化frame

- (instancetype)initWithDict:(NSDictionary *)dict AndRange:(CGPoint)widthHeight{
  
    self = [self initWithDict:dict];
    [self setFrameWithRange:widthHeight];
    return self;

}
+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict AndRange:(CGPoint)widthHeight{
    
    return [[self alloc]initWithDict:dict AndRange:widthHeight];
}

+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndRange:(CGPoint)widthHeight{

    NSArray *array = [NSArray arrayWithContentsOfFile:path];

    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict AndRange:widthHeight]];
}

return arrayM;
}

/*//需要时打开
 + (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path&lt;#andDicType:(dicType)type#&gt; AndRange:(CGPoint)widthHeight{
 
 NSArray *array = [NSArray arrayWithContentsOfFile:path];
 NSMutableArray *arrayM = [NSMutableArray array];
 if (type) {
 for (NSDictionary *dict in array) {
 
 [arrayM addObject:[self &lt;#name#&gt;WithDict:dict AndRange:widthHeight]];
 }
 return arrayM;
 
 }else{
 
 &lt;#Name#&gt;Model * &lt;#name#&gt;Model = [[self alloc]init];
 &lt;#name#&gt;Model.&lt;#array#&gt;s = [&lt;#Name1#&gt;Model &lt;#name#&gt;sWithArray:array];
 return @[&lt;#name#&gt;Model];
 
 }
 */

+ (NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array AndRange:(CGPoint)widthHeight{
    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict AndRange:widthHeight]];
    }
    
    return arrayM;
}




#pragma mark - ============== 方法 ==============


-(void)setFrameWithRange:(CGPoint)widthHeight{
    
    _&lt;#name#&gt;Width = widthHeight.x;
    _&lt;#name#&gt;Height = widthHeight.y;
    [self getFrame];
    
}

-(void)getFrame{
    
    
    if (_&lt;#name#&gt;Width&amp;&amp; _&lt;#name#&gt;Height) {
        //要输出frame和range
    }
    
}



@end
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>855C71E4-22D6-4E5E-9788-F8C7EA88C211</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>frameModel</string>
	<key>IDECodeSnippetTitle</key>
	<string>数据模型</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
