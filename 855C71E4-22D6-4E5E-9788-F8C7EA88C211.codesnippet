<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>myFrameModel</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
@interface &lt;#class name#&gt; : NSObject
typedef NS_ENUM(NSUInteger, &lt;#MyEnum#&gt;) {
    &lt;#MyEnumValueA#&gt;,
};
typedef NS_ENUM(NSUInteger, DicType) {
    singleDic,
    doubleDic
};

@property(nonatomic,copy)NSString * &lt;#key#&gt;;
@property(nonatomic,copy)NSArray * &lt;#name#&gt;s;//列表里有数组
@property(nonatomic,strong)NSNumber * &lt;#number#&gt;;
@property(nonatomic,assign,getter =is&lt;#name#&gt;Hiddened)BOOL &lt;#name#&gt;Hidden;//这样的值主要是由外界设置上的，不由字典里获取


- (instancetype)initWithDict:(NSDictionary *)dict;
+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict;


+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndDicType:(DicType)type;//判断字典类型判断
+ (NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array;


//frame所需的属性（这个可以做输出，也可以当限制）

@property(nonatomic,assign,readonly)CGFloat &lt;#herderFootercell#&gt;Width;
@property(nonatomic,assign,readonly)CGFloat  &lt;#herderFootercell#&gt;Height;

@property(nonatomic,assign,readonly)CGRect  &lt;#xxx#&gt;Frame;

-(void)setFrameWithRange:(CGSize)size;
-(void)setFrameExtendWithRange:(CGSize)size;
//连带初始化frame

- (instancetype)initWithDict:(NSDictionary *)dict AndRange:(CGSize)size;
+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict AndRange:(CGSize)size;

+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndDicType:(DicType)type AndRange:(CGSize)size;
+ (NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array AndRange:(CGSize)size;

@end

@implementation &lt;#class#&gt;

#pragma mark - ============== 初始化 ==============

#warning 由外界数据，根据数组上下关系来设置的记得补齐，h文件的。{
//针对单个的设置这个需要自己先通过上下数组进行判断赋值hidden
- (instancetype)initWithDict:(NSDictionary *)dict and&lt;#name#&gt;Hidden:(BOOL)&lt;#name#&gt;Hidden
{
    self = [super init];
    if (self) {
        [self setValuesForKeysWithDictionary:dict];
        self.&lt;#name#&gt;Hidden =&lt;#name#&gt;Hidden;
    }
    return self;
}

//针对数组集体设置hidden
+(NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array
{
    NSMutableArray *arrayM = [NSMutableArray array];
    for (int i=0; i&lt;array.count; i++) {
        NSDictionary *dict = array[i];
        &lt;#name#&gt;Model * previous&lt;#name#&gt;Model = arrayM.lastObject;
        
        BOOL &lt;#name#&gt;Hidden = &lt;#判断公式#&gt;;
        
        &lt;#name#&gt;Model * &lt;#name#&gt;Model = [self cellWithDict:dict andHiddenTime:&lt;#name#&gt;Hidden];
        
        [arrayM addObject:&lt;#name#&gt;Model];
    }
    
    return arrayM;
}

#warning 由外界数据，根据数组上下关系来设置的记得补齐，h文件的。}

- (instancetype)initWithDict:(NSDictionary *)dict
{
    self = [super init];
    if (self) {
        [self setValuesForKeysWithDictionary:dict];
        _&lt;#name#&gt;s = [&lt;#Class name#&gt; &lt;#name#&gt;sWithArray:_&lt;#name#&gt;s];//判断属性里有无数组
    }
    return self;
}

+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict
{
    return [[self alloc] initWithDict:dict];
}


+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndDicType:(DicType)type
{
    NSArray *array = [NSArray arrayWithContentsOfFile:path];
    NSMutableArray *arrayM = [NSMutableArray array];
    if (type) {
        for (NSDictionary *dict in array) {
            
            [arrayM addObject:[self &lt;#name#&gt;WithDict:dict]];
        }
        return arrayM;
        
    }else{
        
        &lt;#NameModel#&gt; * &lt;#nameModel#&gt; = [[self alloc]init];
        &lt;#nameModel#&gt;.&lt;#array#&gt;s = [&lt;#Name1Model#&gt; &lt;#name#&gt;sWithArray:array];
        return @[&lt;#nameModel#&gt;];
    }//如果是最后一层就删除。且将return 往下一层挪
    
}


+(NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array
{
    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict]];
    }
    
    return arrayM;
}

//连带初始化frame


- (instancetype)initWithDict:(NSDictionary *)dict AndRange:(CGSize)size{
    
    self = [self initWithDict:dict];
    [self setFrame&lt;#Extend#&gt;WithRange:size];//看要不要扩展
    return self;
    
}
+ (instancetype)&lt;#name#&gt;WithDict:(NSDictionary *)dict AndRange:(CGSize)size{
    
    return [[self alloc]initWithDict:dict AndRange:size];
}

+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndRange:(CGSize)size{
    
    NSArray *array = [NSArray arrayWithContentsOfFile:path];
    
    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict AndRange:size]];
    }
    
    return arrayM;
}


+ (NSArray *)&lt;#name#&gt;sWithPath:(NSString *)path AndDicType:(DicType)type AndRange:(CGSize)size{
    
    NSArray *array = [NSArray arrayWithContentsOfFile:path];
    NSMutableArray *arrayM = [NSMutableArray array];
    if (type) {
        for (NSDictionary *dict in array) {
            
            [arrayM addObject:[self &lt;#name#&gt;WithDict:dict AndRange:size]];
        }
        return arrayM;
        
    }else{
        
        &lt;#NameModel#&gt; * &lt;#nameModel#&gt; = [[self alloc]init];
        &lt;#nameModel#&gt;.&lt;#array#&gt;s = [&lt;#Name1Model#&gt; &lt;#name#&gt;sWithArray:array AndRange:size];
        return @[&lt;#nameModel#&gt;];
        
        
    }//如果是最后一层就删除。且将return 往下一层挪
}


+ (NSArray *)&lt;#name#&gt;sWithArray:(NSArray *)array AndRange:(CGSize)size{
    NSMutableArray *arrayM = [NSMutableArray array];
    for (NSDictionary *dict in array) {
        [arrayM addObject:[self &lt;#name#&gt;WithDict:dict AndRange:size]];
    }
    
    return arrayM;
}


#pragma mark - ============== 接口 ==============

-(void)setFrameWithRange:(CGSize)size{
    
    _&lt;#name#&gt;Width = size.width;
    _&lt;#name#&gt;Height = size.height;
    [self getFrame];
    
}

-(void)setFrameExtendWithRange:(CGSize)size{
    for (CellModel * model in self.cells) {
        [model setFrameWithRange:size];
    }
    [self setFrameWithRange:size];
    
}


-(NSString *)description{
    return [NSString stringWithFormat:@"&lt;%@:        %p&gt; {&lt;#属性#&gt;=%@,&lt;#属性#&gt;=%@,XXXFrame=%@}",self.class,self,self.&lt;#属性#&gt;,self.&lt;#属性#&gt;,NSStringFromCG&lt;#Size#&gt;(&lt;#xx#&gt;)];
}
#pragma mark - ============== 方法 ==============



-(void)getFrame{
    
    
    if (_&lt;#name#&gt;Width&amp;&amp; _&lt;#name#&gt;Height) {
        //要输出frame和range boundingRectWithSize
    }
    
}



@end</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>855C71E4-22D6-4E5E-9788-F8C7EA88C211</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>frameModel</string>
	<key>IDECodeSnippetTitle</key>
	<string>数据模型</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
